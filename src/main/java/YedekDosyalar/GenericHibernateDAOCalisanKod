package dao;

import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.Transaction;

import javax.persistence.PersistenceContext;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType;

/**
 * Created by berard on 14.02.17.
 */
public abstract class GenericHibernateDAO<T, ID extends Serializable> implements GenericDAO<T, ID> {

    private static Logger logger = Logger.getLogger(GenericHibernateDAO.class);

    private Class<T> persistentClass;
    private Session session;
    private Transaction transaction;

    public GenericHibernateDAO() {
        this.persistentClass = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass())
                .getActualTypeArguments()[0];

    }

    public Session getSession() {
        if (session == null) {
            logger.info("Session has not been set on DAO before usage");
            throw new IllegalStateException();
        }
        return session;
    }

    public void setSession(Session session) {
        this.session = session;
    }

    public Class<T> getPersistentClass() {
        return persistentClass;
    }

    public T persistOrMerge(T entity) {
        transaction = getSession().getTransaction();
        transaction.begin();
        getSession().saveOrUpdate(entity);
        transaction.commit();
        return entity;
    }

    public void delete(T entity) {
        // TODO Auto-generated method stub

    }


    public T findById(ID id) {
        transaction = getSession().getTransaction();
        transaction.begin();
        T a = this.session.find(this.persistentClass,id);

        return a;

    }







}


